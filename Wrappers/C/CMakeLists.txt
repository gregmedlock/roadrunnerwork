set(target rr_c_api)

set(C_API_INCLUDE_ROOT "${RR_ROOT}/Wrappers/C")

include_directories(    ${C_API_INCLUDE_ROOT}
                        ${RR_ROOT}/source
                        ${THIRD_PARTY_INSTALL_FOLDER}/include
)

add_library(${target} SHARED
rr_c_api.cpp
rr_dll_entry_point.cpp
rr_c_api_support.cpp
)

set_property(   TARGET ${target} 
                PROPERTY  COMPILE_DEFINITIONS 
                          EXPORT_RR_C_API
                          STATIC_RR             #when linking with static lib, no declspec shuld be present..
                          LIBSBML_STATIC
					      LIBLAX_STATIC
                          STATIC_PUGI
                          STATIC_LIBSTRUCT
)

if(${MSVC})
set (CMAKE_SHARED_LINKER_FLAGS 	"${CMAKE_SHARED_LINKER_FLAGS} \"/DEF:${CMAKE_CURRENT_SOURCE_DIR}/c_api_vs.def\"")
endif()

if(${BORLAND})
target_link_libraries (${target} libxml2_xe)
else()
target_link_libraries (${target} libxml2)
endif()

#Link C_api dll statically to roadrunner and libsbml
if(${MINGW})
target_link_libraries (${target} roadrunner)
else()
target_link_libraries (${target} roadrunner-static
                       ${target} blas
                       ${target} lapack
                       ${target} libf2c
                       ${target} pugi-static
                       ${target} rr-libstruct-static
                       )
endif()

#INCLUDE(FindSubversion)
#IF(SUBVERSION_FOUND)
#    Subversion_WC_INFO(${PROJECT_SOURCE_DIR} rr)
#    MESSAGE("Current revision is ${rr_WC_REVISION}")
#    Subversion_WC_LOG(${PROJECT_SOURCE_DIR} rr)
#    MESSAGE("Last changed log is ${rr_LAST_CHANGED_LOG}")
#    MESSAGE("Last changed Author is ${rr_WC_LAST_CHANGED_AUTHOR}")
#
    SET(infoFile rr_version_info)
#    STRING(REPLACE "\n" "\\n\\\n" svn_lastlog_with_slashes ${rr_LAST_CHANGED_LOG}) 
#    
    FILE(WRITE ${infoFile}.h 
"#ifndef ${infoFile}H
#define ${infoFile}H
/*This file is autogenerated by the build system. Any modifications will be overwritten on the next build */
const char* RR_VERSION =  \"${RR_VERSION}\";\n
#endif"
    )
#
##    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${infoFile}.txt ${infoFile}.h)
#ENDIF(SUBVERSION_FOUND)


add_subdirectory(Apps)
add_subdirectory(Examples)
add_subdirectory(Testing)

#=============== INSTALL =====================
install(   FILES ${target}.h rr_c_types.h rr_c_api_exporter.h				 					
           DESTINATION include/c_api  	
           COMPONENT c_api)

install(   
           TARGETS ${target}
           RUNTIME DESTINATION bin
           LIBRARY DESTINATION lib
           ARCHIVE DESTINATION lib
           COMPONENT c_api)

install(   FILES ${lib_path}/${target}.lib	
           DESTINATION lib 			
           COMPONENT c_api)

install(   FILES ${exe_path}/${target}.dll	
           DESTINATION bin 			
           COMPONENT c_api)

